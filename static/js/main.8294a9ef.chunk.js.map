{"version":3,"sources":["logic/calc.js","components/App.js","index.js"],"names":["daysOfAYear","year","isLeapYear","calculateNumberOfVacationDays","startingDate","firstDayOfEarningYear","startingDateDayNumberOfEarningYear","Math","ceil","numberOfDaysOfEarningYear","getFullYear","numberOfDaysWorkedThisEarningYear","numberOfVacationDays","App","props","state","startDate","dayOfYear","healtCareSubThisYear","vacationDaysNextPeriod","vacationDaysThisPeriod","message","onDateChange","bind","date","Date","calculateDayOfYear","this","setState","workingDaysThisYear","round","getMonth","calculateHealthCareSub","calculateNumberOfVacationDaysNextPeriod","calculateNumberOfVacationDaysThisPeriod","className","getYearOfNextVacationPeriod","firstDayOfVacationYear","getYearOfThisVacationPeriod","style","paddingTop","onChange","value","renderMessage","React","Component","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.8294a9ef.chunk.js","sourcesContent":["const defaultNumberOfPaidVacationDays = 25;\r\n\r\n\r\nfunction isLeapYear(year) {\r\n  return year % 400 === 0 || (year % 100 !== 0 && year % 4 === 0);\r\n}\r\n\r\nexport const daysOfAYear = function (year) {\r\n  return isLeapYear(year) ? 366 : 365;\r\n};\r\n\r\nexport const calculateDayOfYear = function (date) {\r\n  return Math.ceil((date - new Date(date.getFullYear(), 0, 1)) / 86400000);\r\n};\r\n\r\nexport const calculateNumberOfVacationDays = function(startingDate, firstDayOfEarningYear) {\r\n    /*\r\n      Antalet betalda semesterdagar beräknas som: \r\n      Antalet semesterdagar per år * antalet anställningsdagar aktuellt intjänandeår/ antal dagar på året \r\n      (avrundas alltid uppåt till hela semesterdagar)\r\n    */\r\n    const startingDateDayNumberOfEarningYear = Math.ceil(\r\n      (startingDate - firstDayOfEarningYear) / 86400000\r\n    );\r\n    const numberOfDaysOfEarningYear = daysOfAYear(\r\n      firstDayOfEarningYear.getFullYear() + 1\r\n    );\r\n    const numberOfDaysWorkedThisEarningYear =\r\n      numberOfDaysOfEarningYear - startingDateDayNumberOfEarningYear + 1;\r\n    const numberOfVacationDays = Math.ceil(\r\n      (numberOfDaysWorkedThisEarningYear *\r\n        defaultNumberOfPaidVacationDays) /\r\n        numberOfDaysOfEarningYear\r\n    );\r\n    if (numberOfVacationDays <= 0) {\r\n      return 0;\r\n    }\r\n    return numberOfVacationDays;\r\n  }\r\n","import React from \"react\";\r\nimport DatePicker from \"react-date-picker\";\r\nimport {\r\n  daysOfAYear,\r\n  calculateDayOfYear,\r\n  calculateNumberOfVacationDays,\r\n} from \"../logic/calc\";\r\n\r\nconst healtCareSub = 5000;\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      startDate: null,\r\n      dayOfYear: null,\r\n      healtCareSubThisYear: 0,\r\n      vacationDaysNextPeriod: 0,\r\n      vacationDaysThisPeriod: 0,\r\n      message: null,\r\n    };\r\n    this.onDateChange = this.onDateChange.bind(this);\r\n  }\r\n\r\n  calculateHealthCareSub(date) {\r\n    const dayOfYear = calculateDayOfYear(date);\r\n    this.setState({ dayOfYear: dayOfYear });\r\n    const workingDaysThisYear = daysOfAYear(date) - dayOfYear;\r\n    this.setState({\r\n      healtCareSubThisYear: Math.round(\r\n        healtCareSub * (workingDaysThisYear / daysOfAYear(date))\r\n      ),\r\n      message: \"Baserat på antal dagar du kommer att jobba i år.\",\r\n    });\r\n  }\r\n\r\n  calculateNumberOfVacationDaysNextPeriod(startingDate) {\r\n    //the first day of the earning year is april 1st\r\n    let firstDayOfEarningYear = new Date(new Date().getFullYear() - 1, 3, 1);\r\n    if (new Date().getMonth() >= 3) {\r\n      firstDayOfEarningYear = new Date(new Date().getFullYear(), 3, 1);\r\n    }\r\n    /*\r\n    If having started before the first day of the current earning year, we can assume that\r\n    the employee will have full vacation\r\n    */\r\n    if (startingDate < firstDayOfEarningYear) {\r\n      this.setState({\r\n        vacationDaysNextPeriod: 25,\r\n      });\r\n      return;\r\n    }\r\n    /*\r\n      Antalet betalda semesterdagar beräknas som: \r\n      Antalet semesterdagar per år * antalet anställningsdagar aktuellt intjänandeår/ antal dagar på året \r\n      (avrundas alltid uppåt till hela semesterdagar)\r\n    */\r\n    this.setState({\r\n      vacationDaysNextPeriod: calculateNumberOfVacationDays(\r\n        startingDate,\r\n        firstDayOfEarningYear\r\n      ),\r\n    });\r\n  }\r\n\r\n  calculateNumberOfVacationDaysThisPeriod(startingDate) {\r\n    //the first day of the earning year is april 1st\r\n    let firstDayOfEarningYear = new Date(new Date().getFullYear() - 2, 3, 1);\r\n    if (new Date().getMonth() >= 3) {\r\n      firstDayOfEarningYear = new Date(new Date().getFullYear() - 1, 3, 1);\r\n    }\r\n    /*\r\n    If having started before the first day of the current earning year, we can assume that\r\n    the employee will have full vacation\r\n    */\r\n    if (startingDate < firstDayOfEarningYear) {\r\n      this.setState({\r\n        vacationDaysThisPeriod: 25,\r\n      });\r\n      return;\r\n    }\r\n    /*\r\n      Antalet betalda semesterdagar beräknas som: \r\n      Antalet semesterdagar per år * antalet anställningsdagar aktuellt intjänandeår/ antal dagar på året \r\n      (avrundas alltid uppåt till hela semesterdagar)\r\n    */\r\n    this.setState({\r\n      vacationDaysThisPeriod: calculateNumberOfVacationDays(\r\n        startingDate,\r\n        firstDayOfEarningYear\r\n      ),\r\n    });\r\n  }\r\n\r\n  onDateChange(date) {\r\n    this.setState({\r\n      startDate: date,\r\n    });\r\n    if (date) {\r\n      if (date.getFullYear() < new Date().getFullYear()) {\r\n        this.setState({\r\n          healtCareSubThisYear: 5000,\r\n          message:\r\n            \"Eftersom du började förra året så har du fullt friskvårdsbidrag i år.\",\r\n        });\r\n      } else {\r\n        this.calculateHealthCareSub(date);\r\n        this.setState({\r\n          message: null,\r\n        });\r\n      }\r\n\r\n      this.calculateNumberOfVacationDaysNextPeriod(date);\r\n      this.calculateNumberOfVacationDaysThisPeriod(date);\r\n    }\r\n  }\r\n\r\n  renderMessage() {\r\n    if (this.state.message) {\r\n      return <h5 className=\"ui info message\">{this.state.message}</h5>;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    function getYearOfNextVacationPeriod() {\r\n      let firstDayOfVacationYear = new Date(new Date().getFullYear(), 3, 1);\r\n      if (new Date().getMonth() >= 3) {\r\n        firstDayOfVacationYear = new Date(new Date().getFullYear() + 1, 3, 1);\r\n      }\r\n      return firstDayOfVacationYear.getFullYear();\r\n    }\r\n\r\n    function getYearOfThisVacationPeriod() {\r\n      let firstDayOfVacationYear = new Date(new Date().getFullYear() - 1, 3, 1);\r\n      if (new Date().getMonth() >= 3) {\r\n        firstDayOfVacationYear = new Date(new Date().getFullYear(), 3, 1);\r\n      }\r\n      return firstDayOfVacationYear.getFullYear();\r\n    }\r\n\r\n    return (\r\n      <div className=\"ui container\">\r\n        <h1 className=\"ui header\">Friskvårdsbidragsuträknare</h1>\r\n        <div className=\"sub header\">\r\n          Välj ett startdatum för att räkna ut hur mycket Friskvårdsbidrag du är\r\n          berättigad till i år.\r\n        </div>\r\n        <div style={{ paddingTop: \"30px\" }}>\r\n          <DatePicker\r\n            onChange={this.onDateChange}\r\n            value={this.state.startDate}\r\n          />\r\n        </div>\r\n        <h2 className=\"ui icon header\">\r\n          <div className=\"content\">\r\n            Friskvårdsbidrag: {this.state.healtCareSubThisYear}\r\n          </div>\r\n          <div className=\"content\">\r\n            Semester period 1/4/{getYearOfThisVacationPeriod()}-31/3/\r\n            {getYearOfThisVacationPeriod() + 1}:{\" \"}\r\n            {this.state.vacationDaysThisPeriod}\r\n          </div>\r\n          <div className=\"content\">\r\n            Semester period 1/4/{getYearOfNextVacationPeriod()}-31/3/\r\n            {getYearOfNextVacationPeriod() + 1}:{\" \"}\r\n            {this.state.vacationDaysNextPeriod}\r\n          </div>\r\n        </h2>\r\n        {this.renderMessage()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/App';\r\n\r\nReactDOM.render(<App />,\r\n    document.querySelector('#root'));"],"sourceRoot":""}